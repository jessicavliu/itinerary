[{"/Users/jessicaliu/Desktop/itinerary/client/src/index.tsx":"1","/Users/jessicaliu/Desktop/itinerary/client/src/reportWebVitals.ts":"2","/Users/jessicaliu/Desktop/itinerary/client/src/App.tsx":"3","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Itinerary/SingleItineraryPage.tsx":"4","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LocationsPage.tsx":"5","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Itinerary/ItinerariesPage.tsx":"6","/Users/jessicaliu/Desktop/itinerary/client/src/Models/MockItineraries.ts":"7","/Users/jessicaliu/Desktop/itinerary/client/src/Models/MockLocations.ts":"8","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LocationList.tsx":"9","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/RightPanel.tsx":"10","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Itinerary/ItineraryCell.tsx":"11","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LeftPanel.tsx":"12","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LocationCell.tsx":"13","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/MainMap.tsx":"14","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/AddLocationModal.tsx":"15","/Users/jessicaliu/Desktop/itinerary/client/src/Services/ItineraryService.ts":"16","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/MapWrapper.tsx":"17","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/GoogleMap.tsx":"18","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/SearchBox.tsx":"19"},{"size":1133,"mtime":1640533754973,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":1636678858247,"results":"22","hashOfConfig":"21"},{"size":1622,"mtime":1641180973923,"results":"23","hashOfConfig":"21"},{"size":522,"mtime":1640888444891,"results":"24","hashOfConfig":"21"},{"size":612,"mtime":1640888418730,"results":"25","hashOfConfig":"21"},{"size":577,"mtime":1640888709108,"results":"26","hashOfConfig":"21"},{"size":1900,"mtime":1641073979969,"results":"27","hashOfConfig":"21"},{"size":886,"mtime":1640894960840,"results":"28","hashOfConfig":"21"},{"size":522,"mtime":1640894910228,"results":"29","hashOfConfig":"21"},{"size":384,"mtime":1640894770358,"results":"30","hashOfConfig":"21"},{"size":431,"mtime":1640890224278,"results":"31","hashOfConfig":"21"},{"size":881,"mtime":1640894915156,"results":"32","hashOfConfig":"21"},{"size":828,"mtime":1640894906295,"results":"33","hashOfConfig":"21"},{"size":685,"mtime":1640894752942,"results":"34","hashOfConfig":"21"},{"size":2233,"mtime":1640893543260,"results":"35","hashOfConfig":"21"},{"size":611,"mtime":1640894929376,"results":"36","hashOfConfig":"21"},{"size":1918,"mtime":1640891502281,"results":"37","hashOfConfig":"21"},{"size":662,"mtime":1640891511142,"results":"38","hashOfConfig":"21"},{"size":3913,"mtime":1640892865714,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"vq0nk6",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},"/Users/jessicaliu/Desktop/itinerary/client/src/index.tsx",[],["86","87"],"/Users/jessicaliu/Desktop/itinerary/client/src/reportWebVitals.ts",[],"/Users/jessicaliu/Desktop/itinerary/client/src/App.tsx",["88","89","90","91"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { Link, Outlet } from 'react-router-dom';\nimport { isAsExpression } from 'typescript';\n\nconst initContextValue: any = null;\nexport const LocationContext = React.createContext(initContextValue);\n\nexport const App = () => {\n\tconst [msg, setMsg] = useState('');\n\tuseEffect(() => {\n\t\tconsole.log('here')\n\t\taxios.get('/api/hello')\n\t\t\t.then((res: { data: React.SetStateAction<string>; }) => { console.log('returned', res.data); setMsg(res.data)} )\n\t}, [])\n\n\t\n\t// const [locationForMap, setLocationForMap] = useState(null);\n\n\t// return (\n\t// \t<>\n\t// \t\t<LocationContext.Provider value={{ locationForMap, setLocationForMap }}>\n\t// \t\t<link rel=\"stylesheet\" href=\"https://unpkg.com/tachyons@4/css/tachyons.min.css\"></link>\n\t// \t\t<ul>\n\t// \t\t\t<li><Link to=\"/\">Home</Link></li>\n\t// \t\t\t<li><Link to=\"/itineraries\">Itineraries</Link></li>\n\t// \t\t\t<li><Link to=\"/locations\">Locations</Link></li>\n\t// \t\t</ul>\n\t// \t\t<Outlet/>\n\t// \t\t</LocationContext.Provider>\n\t// \t</>\n\t// );\n\n\treturn (\n\t\t<> \n\t\t\t{msg} \n\t\t</>\n\t)\n}\n\n{/* <link rel=\"stylesheet\" href=\"https://unpkg.com/tachyons@4/css/tachyons.min.css\"></link>\n<ul>\n\t<li><Link to=\"/\">Home</Link></li>\n\t<li><Link to=\"/itineraries\">Itineraries</Link></li>\n\t<li><Link to=\"/locations\">Locations</Link></li>\n</ul>\n<LocationContext.Provider value={{ locationForMap, setLocationForMap }}>\n\t<div className=\"flex\">\n\t\t<div className=\"w-50 pa3 mr2\">\n\t\t\t<LeftPanel locations={mockLocations} />\n\t\t</div>\n\t\t<div className=\"w-50 pa3 mr2\">\n\t\t\t<RightPanel />\n\t\t</div>\n\t</div>\n</LocationContext.Provider> */}","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Itinerary/SingleItineraryPage.tsx",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LocationsPage.tsx",["92","93"],"import React, { useState } from 'react';\nimport { LeftPanel } from './LeftPanel';\nimport { RightPanel } from './RightPanel';\nimport { Link, Outlet } from 'react-router-dom';\nimport { mockLocations } from '../../Models/MockLocations';\n\nexport const LocationsPage = () => {\n\treturn (\n\t\t<>\n\t\t\t<link rel=\"stylesheet\" href=\"https://unpkg.com/tachyons@4/css/tachyons.min.css\"></link>\n            <Outlet/>\n\t\t\t\t<div className=\"flex\">\n\t\t\t\t\t<div className=\"w-50 pa3 mr2\">\n\t\t\t\t\t\t<LeftPanel locations={mockLocations} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"w-50 pa3 mr2\">\n\t\t\t\t\t\t<RightPanel />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t</>\n\t);\n}","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Itinerary/ItinerariesPage.tsx",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Models/MockItineraries.ts",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Models/MockLocations.ts",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LocationList.tsx",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/RightPanel.tsx",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Itinerary/ItineraryCell.tsx",["94"],"import { Link, useNavigate } from \"react-router-dom\"\n\ninterface ItineraryCellProps {\n    itinerary: any\n}\n\nexport const ItineraryCell = ({itinerary}: ItineraryCellProps) => {\n    const navigate = useNavigate();\n    const handleGoToItineraryClick = () => {\n        navigate(`/itineraries/${itinerary.id}`);\n    }\n    return (\n        <button onClick={handleGoToItineraryClick}>\n            {itinerary.name}\n        </button>\n    )\n}","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LeftPanel.tsx",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/LocationCell.tsx",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Location/MainMap.tsx",["95"],"import React, { useContext } from 'react';\n\nimport configData from \"../../config.json\";\n\nimport { LocationContext } from '../../App';\n\nexport const MainMap = () => {\n    const {locationForMap} = useContext(LocationContext);\n\n    return (\n        <>\n            <iframe\n                width=\"600\"\n                height=\"450\"\n                loading=\"lazy\"\n                allowFullScreen\n                src={`https://www.google.com/maps/embed/v1/place?key=${configData.GOOGLE_MAPS_API_KEY}\n                &q=${locationForMap ? locationForMap.name + ' ' + locationForMap.address : 'San Francisco, CA' }`}>\n            </iframe>\n            <div id=\"map\"></div>\n        </>\n    );\n};\n","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/AddLocationModal.tsx",["96"],"import '../../styles/modal.css';\nimport '../../styles/map.css';\nimport { MapWrapper } from './MapWrapper';\nimport { mockItineraries } from '../../Models/MockItineraries';\nimport { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { getItineraryById, putAddLocationToItinerary } from '../../Services/ItineraryService';\nimport { LocationContext } from '../../App';\n\ninterface AddLocationModalProps {\n    show: boolean;\n    handleClose: () => void;\n}\n\nexport const AddLocationModal = ({ show, handleClose }: AddLocationModalProps) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n    const ref = useRef<HTMLSelectElement>(null);\n    const [dropdownValue, setDropdownValue] = useState('');\n    const {locationForMap} = useContext(LocationContext);\n\n    useEffect(() => {\n        if(ref.current) {\n            setDropdownValue(ref.current.value);\n        }\n    }, [ref]);\n\n    const handleAddLocationToItinerary = useCallback(() => {\n        const itinerary = getItineraryById(parseInt(dropdownValue));\n        putAddLocationToItinerary(itinerary, locationForMap);\n\n        // update location db to have associated itinerary\n        console.log('added location to itinerary')\n\n        handleClose();\n    }, [handleClose]);\n\n    console.log('rerender location modal');\n\n    return (\n        <div className={showHideClassName}>\n            <section className=\"modal-main\">\n                <button type=\"button\" onClick={handleClose}>\n                    Close\n                </button>\n                <div className=\"main-wrapper\">\n                    <MapWrapper />\n                </div>\n                <div>\n                    <span>Add to itineraries: </span>\n                    <select ref={ref}>\n                        {\n                            mockItineraries.map(itinerary => (\n                                <option value={itinerary.id}>{itinerary.name}</option>\n                            ))\n                        }\n                    </select>\n                </div>\n                <button type=\"button\" onClick={handleAddLocationToItinerary}>\n                    Add location\n                </button>\n            </section>\n        </div>\n    );\n}","/Users/jessicaliu/Desktop/itinerary/client/src/Services/ItineraryService.ts",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/MapWrapper.tsx",["97"],"\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { GoogleMap } from './GoogleMap';\nimport { SearchBox } from './SearchBox';\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const MapWrapper = () => {\n    const [zoom, setZoom] = useState(3);\n    const [mapInstance, setMapInstance] = useState<google.maps.Map>();\n    const [mapApiLoaded, setMapApiLoaded] = useState(false);\n\n    let lat = 0;\n    let lng = 0;\n\n    const [center, setCenter] = useState<google.maps.LatLngLiteral>({ lat, lng });\n\n    const onIdle = (m: google.maps.Map) => {\n        console.log('onIdle');\n        setZoom(m.getZoom()!);\n        setCenter(m.getCenter()!.toJSON());\n    }\n\n    const apiIsLoaded = ({map, maps}: any) => {\n        console.log('map', map);\n        console.log('maps (api)', maps);\n        setMapInstance(map);\n        setMapApiLoaded(true);\n        // setMapApi(maps);\n    }\n\n    console.log('rerender map wrapper');\n\n    return (\n        <>\n            <Wrapper>\n                    { mapApiLoaded &&\n                        <div>\n                            <SearchBox map={mapInstance!} />\n                        </div>\n                    }\n\n                    <GoogleMap\n                        defaultZoom={zoom}\n                        defaultCenter={center}\n                        onGoogleApiLoaded={apiIsLoaded}\n                        yesIWantToUseGoogleMapApiInternals\n                    >\n                        {/* {places.map((place) => (\n                            <Marker\n                                key={place.id}\n                                text={place.name}\n                                lat={place.geometry.location.lat}\n                                lng={place.geometry.location.lng}\n                            />\n                        ))} */}\n                    </GoogleMap>\n            </Wrapper>\n        </>\n    )\n};","/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/GoogleMap.tsx",[],"/Users/jessicaliu/Desktop/itinerary/client/src/Components/Modal/SearchBox.tsx",["98","99","100"],"import React, { FC, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { markAsUntransferable } from 'worker_threads';\nimport { LocationContext } from '../../App';\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n\ninterface SearchBoxProps {\n    map: google.maps.Map;\n    mapApi?: any\n}\n\nexport const SearchBox: FC<SearchBoxProps> = ({ map }: SearchBoxProps) => {\n    const [searchBox, setSearchBox] = useState<google.maps.places.SearchBox>();\n    const ref = useRef<HTMLInputElement>(null);\n    let markers: google.maps.Marker[] = [];\n    const {setLocationForMap} = useContext(LocationContext);\n\n    useEffect(() => {\n        if (ref.current) {\n            setSearchBox(new google.maps.places.SearchBox(ref.current));\n\n        }\n    }, [ref]);\n\n    const onBoundsChanged = useCallback(() => {\n        console.log('on bounds changed')\n        searchBox!.setBounds(map.getBounds() as google.maps.LatLngBounds);\n    }, [searchBox, map]);\n\n    const onPlacesChanged = useCallback(() => {\n        console.log('on places changed')\n        \n        const places = searchBox!.getPlaces();\n        if (places.length === 0) {\n            return;\n        }\n\n        markers.forEach((marker) => {\n            marker.setMap(null);\n        });\n\n        markers = [];\n\n        const bounds = new google.maps.LatLngBounds();\n\n        places.forEach((place) => {\n            console.log(place);\n            if (!place.geometry || !place.geometry.location) {\n                console.log(\"Returned place contains no geometry\");\n                return;\n            }\n\n            const icon = {\n                url: place.icon as string,\n                size: new google.maps.Size(71, 71),\n                origin: new google.maps.Point(0, 0),\n                anchor: new google.maps.Point(17, 34),\n                scaledSize: new google.maps.Size(25, 25),\n            };\n\n            markers.push(\n                new google.maps.Marker({\n                    map,\n                    icon,\n                    title: place.name,\n                    position: place.geometry.location,\n                })\n            );\n\n            if (place.geometry.viewport) {\n                // Only geocodes have viewport\n                bounds.union(place.geometry.viewport);\n            } else {\n                bounds.extend(place.geometry.location);\n            }\n\n        });\n\n        if(places.length == 1) {\n            // TODO: this shouldn't be using the LocationContext which is for the main map, but maybe a \"ModalLocationContext\".\n            // Or maybe move to redux, b/c I don't think I'm supposed to be using useContext to change parent values.\n            setLocationForMap({\n                name: places[0].name,\n                address: places[0].formatted_address,\n                description: '',\n                lat: places[0].geometry ? places[0].geometry.location.lat() : 0,\n                long: places[0].geometry ? places[0].geometry.location.lng() : 0,\n            });\n        }\n        map.fitBounds(bounds);\n    }, [searchBox, map]);\n\n    useEffect(() => {\n        if(searchBox) {\n            map.addListener('bounds_changed', onBoundsChanged)\n            searchBox.addListener('places_changed', onPlacesChanged);\n            console.log('added listener')\n\n            return () => {\n                google.maps.event.clearListeners(map, 'bounds_changed');\n                google.maps.event.clearListeners(searchBox, 'places_changed');\n                console.log('removed listener')\n            }\n        }\n    }, [map, searchBox, onBoundsChanged, onPlacesChanged]);\n\n    return (\n        <Wrapper>\n            <input\n                ref={ref}\n                type=\"text\"\n                placeholder=\"Enter a location\"\n            />\n        </Wrapper>\n    );\n};",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":14},{"ruleId":"105","severity":1,"message":"109","line":4,"column":16,"nodeType":"107","messageId":"108","endLine":4,"endColumn":22},{"ruleId":"105","severity":1,"message":"110","line":5,"column":10,"nodeType":"107","messageId":"108","endLine":5,"endColumn":24},{"ruleId":"111","severity":1,"message":"112","line":42,"column":1,"nodeType":"113","messageId":"114","endLine":57,"endColumn":32},{"ruleId":"105","severity":1,"message":"115","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"106","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":1,"column":10,"nodeType":"107","messageId":"108","endLine":1,"endColumn":14},{"ruleId":"116","severity":1,"message":"117","line":12,"column":13,"nodeType":"118","endLine":18,"endColumn":116},{"ruleId":"119","severity":1,"message":"120","line":34,"column":8,"nodeType":"121","endLine":34,"endColumn":21,"suggestions":"122"},{"ruleId":"105","severity":1,"message":"123","line":23,"column":11,"nodeType":"107","messageId":"108","endLine":23,"endColumn":17},{"ruleId":"105","severity":1,"message":"124","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":30},{"ruleId":"119","severity":1,"message":"125","line":49,"column":19,"nodeType":"121","endLine":49,"endColumn":21},{"ruleId":"126","severity":1,"message":"127","line":86,"column":26,"nodeType":"128","messageId":"129","endLine":86,"endColumn":28},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Outlet' is defined but never used.","'isAsExpression' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useState' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'dropdownValue' and 'locationForMap'. Either include them or remove the dependency array.","ArrayExpression",["132"],"'onIdle' is assigned a value but never used.","'markAsUntransferable' is defined but never used.","Assignments to the 'markers' variable from inside React Hook useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useCallback.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},"Update the dependencies array to be: [dropdownValue, handleClose, locationForMap]",{"range":"135","text":"136"},[1267,1280],"[dropdownValue, handleClose, locationForMap]"]