{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Components/Location/MapDisplay.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { Wrapper } from \"@googlemaps/react-wrapper\";\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { LocationContext } from './LocationsPage';\nimport { createCustomEqual } from \"fast-equals\";\nimport { isLatLngLiteral } from \"@googlemaps/typescript-guards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MapDisplay = () => {\n  _s();\n\n  const {\n    locationForMap\n  } = useContext(LocationContext);\n  const [zoom, setZoom] = useState(3);\n  let locationMessageSuffix = '';\n  let lat = 0;\n  let lng = 0;\n\n  if (locationForMap) {\n    lat = locationForMap.lat;\n    lng = locationForMap.long;\n    locationMessageSuffix = `for ${locationForMap.name}`;\n  }\n\n  const [center, setCenter] = useState({\n    lat,\n    lng\n  });\n\n  const onIdle = m => {\n    console.log('onIdle');\n    setZoom(m.getZoom());\n    setCenter(m.getCenter().toJSON());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outline w-100 pa3 mr2\",\n      children: [\"A Map Display \", locationMessageSuffix]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      apiKey: \"\",\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        center: center,\n        onIdle: onIdle,\n        zoom: zoom,\n        style: {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MapDisplay, \"4rR7R8djGO7i4cDbFP/yfUkiM4g=\");\n\n_c = MapDisplay;\n\nconst Map = _ref => {\n  _s2();\n\n  let {\n    onIdle,\n    style,\n    children,\n    ...options\n  } = _ref;\n  const ref = useRef(null);\n  const [map, setMap] = useState();\n  useEffect(() => {\n    if (ref.current && !map) {\n      setMap(new window.google.maps.Map(ref.current, {}));\n    }\n  }, [ref, map]);\n  useDeepCompareEffectForMaps(() => {\n    if (map) {\n      map.setOptions(options);\n    }\n  }, [map, options]);\n  useEffect(() => {\n    if (map) {\n      ['idle'].forEach(eventName => {\n        google.maps.event.clearListeners(map, eventName);\n      });\n\n      if (onIdle) {\n        map.addListener('idle', () => onIdle(map));\n      }\n    }\n  }, [map, onIdle]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), React.Children.map(children, child => {\n      if ( /*#__PURE__*/React.isValidElement(child)) {\n        return /*#__PURE__*/React.cloneElement(child, {\n          map\n        });\n      }\n    })]\n  }, void 0, true);\n};\n\n_s2(Map, \"opLBIwkqaylsb+d//rXdw+ITIbA=\", false, function () {\n  return [useDeepCompareEffectForMaps];\n});\n\n_c2 = Map;\n\nconst Marker = options => {\n  _s3();\n\n  const [marker, setMarker] = useState();\n  useEffect(() => {\n    if (!marker) {\n      setMarker(new google.maps.Marker());\n    }\n\n    return () => {\n      if (marker) {\n        marker === null || marker === void 0 ? void 0 : marker.setMap(null);\n      }\n    };\n  }, [marker]);\n  useEffect(() => {\n    if (marker) {\n      marker.setOptions(options);\n    }\n  }, [marker, options]);\n  return null;\n};\n\n_s3(Marker, \"v0lsFHs9RHYmIQcqp+bjrzceB3I=\");\n\n_c3 = Marker;\nconst deepCompareEqualsForMaps = createCustomEqual(deepEqual => (a, b) => {\n  if (isLatLngLiteral(a) || a instanceof google.maps.LatLng || isLatLngLiteral(b) || b instanceof google.maps.LatLng) {\n    return new google.maps.LatLng(a).equals(new google.maps.LatLng(b));\n  }\n\n  return deepEqual(a, b);\n});\n\nfunction useDeepCompareMemoize(value) {\n  _s4();\n\n  const ref = useRef();\n\n  if (!deepCompareEqualsForMaps(value, ref.current)) {\n    ref.current = value;\n  }\n\n  return ref.current;\n}\n\n_s4(useDeepCompareMemoize, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n\nfunction useDeepCompareEffectForMaps(callback, dependencies) {\n  _s5();\n\n  useEffect(callback, dependencies.map(useDeepCompareMemoize));\n}\n\n_s5(useDeepCompareEffectForMaps, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MapDisplay\");\n$RefreshReg$(_c2, \"Map\");\n$RefreshReg$(_c3, \"Marker\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Components/Location/MapDisplay.tsx"],"names":["Wrapper","React","useContext","useEffect","useRef","useState","LocationContext","createCustomEqual","isLatLngLiteral","MapDisplay","locationForMap","zoom","setZoom","locationMessageSuffix","lat","lng","long","name","center","setCenter","onIdle","m","console","log","getZoom","getCenter","toJSON","Map","style","children","options","ref","map","setMap","current","window","google","maps","useDeepCompareEffectForMaps","setOptions","forEach","eventName","event","clearListeners","addListener","Children","child","isValidElement","cloneElement","Marker","marker","setMarker","deepCompareEqualsForMaps","deepEqual","a","b","LatLng","equals","useDeepCompareMemoize","value","callback","dependencies"],"mappings":"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","sourcesContent":["import { Wrapper, Status } from \"@googlemaps/react-wrapper\";\nimport React, { EffectCallback, FC, FunctionComponent, useContext, useEffect, useRef, useState } from 'react';\nimport { LocationContext } from './LocationsPage';\nimport { createCustomEqual } from \"fast-equals\";\nimport { isLatLngLiteral } from \"@googlemaps/typescript-guards\";\n\nexport const MapDisplay = () => {\n    const {locationForMap} = useContext(LocationContext);\n    const [zoom, setZoom] = useState(3);\n\n    let locationMessageSuffix = '';\n    let lat = 0; \n    let lng = 0;\n\n    if (locationForMap) {\n        lat = locationForMap.lat;\n        lng = locationForMap.long;\n        locationMessageSuffix = `for ${locationForMap.name}`;\n    }\n\n    const [center, setCenter] = useState<google.maps.LatLngLiteral>({ lat, lng });\n    \n    const onIdle = (m: google.maps.Map) => {\n        console.log('onIdle');\n        setZoom(m.getZoom()!);\n        setCenter(m.getCenter()!.toJSON());\n    }\n\n    return (\n        <>\n            <div className =\"outline w-100 pa3 mr2\">A Map Display {locationMessageSuffix}</div>\n            <Wrapper apiKey={\"\"}>\n                <Map\n                    center={center}\n                    onIdle={onIdle}\n                    zoom={zoom}\n                    style={{}}\n                >\n                </Map>\n            </Wrapper>\n            <div id=\"map\"></div>\n        </>\n    );\n};\n\ninterface MapProps extends google.maps.MapOptions {\n    style: { [key: string]: string };\n    onIdle?: (map: google.maps.Map) => void;\n    children?: React.ReactNode,\n}\n\nconst Map: FC<MapProps> = ({onIdle, style, children, ...options}: MapProps) => {\n    const ref = useRef<HTMLDivElement>(null);\n    const [map, setMap] = useState<google.maps.Map>();\n\n    useEffect(() => {\n        if(ref.current && !map) {\n            setMap(new window.google.maps.Map(ref.current, {}))\n        }\n    }, [ref, map]);\n    \n    useDeepCompareEffectForMaps(() => {\n        if(map) {\n            map.setOptions(options);\n        }\n    }, [map, options])\n\n    useEffect(() => {\n        if(map) {\n            ['idle'].forEach((eventName) => {\n                google.maps.event.clearListeners(map, eventName);\n            });\n\n            if (onIdle) {\n                map.addListener('idle', () => onIdle(map));\n            }\n        }\n    }, [map, onIdle]);\n\n    return (\n        <>\n            <div ref={ref} style={style} />\n            {React.Children.map(children, (child) => {\n                if (React.isValidElement(child)) {\n                    return React.cloneElement(child, { map });\n                }\n            })}\n        </>\n    );\n};\n\nconst Marker: FC<google.maps.MarkerOptions> = (options) => {\n    const [marker, setMarker] = useState<google.maps.Marker>();\n\n    useEffect(() => {\n        if (!marker) {\n            setMarker(new google.maps.Marker());\n        }\n\n        return () => {\n            if(marker) {\n                marker?.setMap(null);\n            }\n        }\n    }, [marker]);\n\n    useEffect(() => {\n        if(marker) {\n            marker.setOptions(options);\n        }\n    }, [marker, options]);\n\n    return null;\n};\n\nconst deepCompareEqualsForMaps = createCustomEqual(\n    (deepEqual) => (a: any, b: any) => {\n        if(\n            isLatLngLiteral(a) ||\n            a instanceof google.maps.LatLng ||\n            isLatLngLiteral(b) ||\n            b instanceof google.maps.LatLng\n        ) {\n            return new google.maps.LatLng(a).equals(new google.maps.LatLng(b));\n        }\n\n        return deepEqual(a, b);\n    }\n)\n\nfunction useDeepCompareMemoize(value: any) {\n    const ref = useRef();\n\n    if(!deepCompareEqualsForMaps(value, ref.current)) {\n        ref.current = value;\n    }\n\n    return ref.current;\n}\n\nfunction useDeepCompareEffectForMaps(\n    callback: EffectCallback,\n    dependencies: any[]\n) {\n    useEffect(callback, dependencies.map(useDeepCompareMemoize));\n}\n"]},"metadata":{},"sourceType":"module"}