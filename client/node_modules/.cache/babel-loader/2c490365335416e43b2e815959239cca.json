{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Modal/SearchBox.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n_c = Wrapper;\nexport const SearchBox = _ref => {\n  _s();\n\n  let {\n    map\n  } = _ref;\n  const [searchBox, setSearchBox] = useState();\n  const ref = useRef(null);\n  let markers = [];\n  useEffect(() => {\n    if (ref.current) {\n      console.log('setting search box to ref.current');\n      setSearchBox(new google.maps.places.SearchBox(ref.current));\n    }\n  }, [ref]);\n  const onBoundsChanged = useCallback(() => {\n    console.log('on bounds changed');\n    searchBox.setBounds(map.getBounds());\n  }, [searchBox, map]);\n  const onPlacesChanged = useCallback(() => {\n    console.log('on places changed');\n    console.log('searchBox?', searchBox); // const places = searchBox!.getPlaces();\n    // if (places.length === 0) {\n    //     return;\n    // }\n    // markers.forEach((marker) => {\n    //     marker.setMap(null);\n    // });\n    // markers = [];\n    // const bounds = new google.maps.LatLngBounds();\n    // places.forEach((place) => {\n    //     if (!place.geometry || !place.geometry.location) {\n    //         console.log(\"Returned place contains no geometry\");\n    //         return;\n    //     }\n    //     const icon = {\n    //         url: place.icon as string,\n    //         size: new google.maps.Size(71, 71),\n    //         origin: new google.maps.Point(0, 0),\n    //         anchor: new google.maps.Point(17, 34),\n    //         scaledSize: new google.maps.Size(25, 25),\n    //     };\n    //     markers.push(\n    //         new google.maps.Marker({\n    //             map,\n    //             icon,\n    //             title: place.name,\n    //             position: place.geometry.location,\n    //         })\n    //     );\n    //     console.log(markers);\n    //     if (place.geometry.viewport) {\n    //         // Only geocodes have viewport\n    //         bounds.union(place.geometry.viewport);\n    //     } else {\n    //         bounds.extend(place.geometry.location);\n    //     }\n    // });\n    // map.fitBounds(bounds);\n  }, [searchBox, map]);\n  useEffect(() => {\n    if (searchBox) {\n      console.log(searchBox);\n      map.addListener('bounds_changed', onBoundsChanged);\n      searchBox.addListener('places_changed', onPlacesChanged);\n      console.log('added listener');\n      return () => {\n        google.maps.event.clearListeners(map, 'bounds_changed');\n        google.maps.event.clearListeners(map, 'places_changed');\n        console.log('removed listener');\n      };\n    }\n  }, [map, searchBox, onBoundsChanged, onPlacesChanged]);\n  console.log('rerender search box');\n  console.log('ref.currnet', ref, ref.current);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: ref,\n      type: \"text\",\n      placeholder: \"Enter a location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBox, \"6SSnWfkHdBYnYxQePtVkaK1INI8=\");\n\n_c2 = SearchBox;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"SearchBox\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Modal/SearchBox.tsx"],"names":["React","useCallback","useEffect","useRef","useState","styled","Wrapper","div","SearchBox","map","searchBox","setSearchBox","ref","markers","current","console","log","google","maps","places","onBoundsChanged","setBounds","getBounds","onPlacesChanged","addListener","event","clearListeners"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n\ninterface SearchBoxProps {\n    map: google.maps.Map;\n    mapApi?: any\n}\n\nexport const SearchBox: FC<SearchBoxProps> = ({ map }: SearchBoxProps) => {\n    const [searchBox, setSearchBox] = useState<google.maps.places.SearchBox>();\n    const ref = useRef<HTMLInputElement>(null);\n    let markers: google.maps.Marker[] = [];\n\n    useEffect(() => {\n        if (ref.current) {\n            console.log('setting search box to ref.current');\n            setSearchBox(new google.maps.places.SearchBox(ref.current));\n\n        }\n    }, [ref]);\n\n    const onBoundsChanged = useCallback(() => {\n        console.log('on bounds changed')\n        searchBox!.setBounds(map.getBounds() as google.maps.LatLngBounds);\n    }, [searchBox, map]);\n\n    const onPlacesChanged = useCallback(() => {\n        console.log('on places changed')\n        console.log('searchBox?', searchBox);\n        \n        // const places = searchBox!.getPlaces();\n        // if (places.length === 0) {\n        //     return;\n        // }\n\n        // markers.forEach((marker) => {\n        //     marker.setMap(null);\n        // });\n\n        // markers = [];\n\n        // const bounds = new google.maps.LatLngBounds();\n\n        // places.forEach((place) => {\n        //     if (!place.geometry || !place.geometry.location) {\n        //         console.log(\"Returned place contains no geometry\");\n        //         return;\n        //     }\n\n        //     const icon = {\n        //         url: place.icon as string,\n        //         size: new google.maps.Size(71, 71),\n        //         origin: new google.maps.Point(0, 0),\n        //         anchor: new google.maps.Point(17, 34),\n        //         scaledSize: new google.maps.Size(25, 25),\n        //     };\n\n        //     markers.push(\n        //         new google.maps.Marker({\n        //             map,\n        //             icon,\n        //             title: place.name,\n        //             position: place.geometry.location,\n        //         })\n        //     );\n\n        //     console.log(markers);\n\n        //     if (place.geometry.viewport) {\n        //         // Only geocodes have viewport\n        //         bounds.union(place.geometry.viewport);\n        //     } else {\n        //         bounds.extend(place.geometry.location);\n        //     }\n\n        // });\n        // map.fitBounds(bounds);\n    }, [searchBox, map]);\n\n    useEffect(() => {\n        if(searchBox) {\n            console.log(searchBox);\n            map.addListener('bounds_changed', onBoundsChanged)\n            searchBox.addListener('places_changed', onPlacesChanged);\n            console.log('added listener')\n\n            return () => {\n                google.maps.event.clearListeners(map, 'bounds_changed');\n                google.maps.event.clearListeners(map, 'places_changed');\n                console.log('removed listener')\n            }\n        }\n    }, [map, searchBox, onBoundsChanged, onPlacesChanged]);\n\n\n    console.log('rerender search box');\n    console.log('ref.currnet', ref, ref.current);\n\n    return (\n        <Wrapper>\n            <input\n                ref={ref}\n                type=\"text\"\n                placeholder=\"Enter a location\"\n            />\n        </Wrapper>\n    );\n};"]},"metadata":{},"sourceType":"module"}