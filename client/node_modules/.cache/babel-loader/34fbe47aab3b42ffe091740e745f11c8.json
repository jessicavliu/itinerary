{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Modal/MapWrapper.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { GoogleMap } from './GoogleMap';\nimport { SearchBox } from './SearchBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n_c = Wrapper;\nexport const MapWrapper = () => {\n  _s();\n\n  const [zoom, setZoom] = useState(3);\n  const [mapInstance, setMapInstance] = useState();\n  const [mapApiLoaded, setMapApiLoaded] = useState(false);\n  const places = [];\n  let lat = 0;\n  let lng = 0;\n  const [center, setCenter] = useState({\n    lat,\n    lng\n  });\n\n  const onIdle = m => {\n    console.log('onIdle');\n    setZoom(m.getZoom());\n    setCenter(m.getCenter().toJSON());\n  };\n\n  const apiIsLoaded = _ref => {\n    let {\n      map,\n      maps\n    } = _ref;\n    setMapApiLoaded(true);\n    setMapInstance(map); // setMapApi(maps);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [mapApiLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SearchBox, {\n          map: mapInstance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        defaultZoom: zoom,\n        defaultCenter: center,\n        onGoogleApiLoaded: apiIsLoaded,\n        yesIWantToUseGoogleMapApiInternals: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(MapWrapper, \"KoFeQ3QqdWlYyegskPaVp3ieG84=\");\n\n_c2 = MapWrapper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"MapWrapper\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Modal/MapWrapper.tsx"],"names":["React","useState","styled","GoogleMap","SearchBox","Wrapper","main","MapWrapper","zoom","setZoom","mapInstance","setMapInstance","mapApiLoaded","setMapApiLoaded","places","lat","lng","center","setCenter","onIdle","m","console","log","getZoom","getCenter","toJSON","apiIsLoaded","map","maps"],"mappings":";;;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;;;AAEA,MAAMC,OAAO,GAAGH,MAAM,CAACI,IAAK;AAC5B;AACA;AACA,CAHA;KAAMD,O;AAKN,OAAO,MAAME,UAAU,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMa,MAAwC,GAAG,EAAjD;AAEA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAA4B;AAAEc,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAA5B,CAApC;;AAEA,QAAMG,MAAM,GAAIC,CAAD,IAAwB;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAb,IAAAA,OAAO,CAACW,CAAC,CAACG,OAAF,EAAD,CAAP;AACAL,IAAAA,SAAS,CAACE,CAAC,CAACI,SAAF,GAAeC,MAAf,EAAD,CAAT;AACH,GAJD;;AAMA,QAAMC,WAAW,GAAG,QAAsB;AAAA,QAArB;AAACC,MAAAA,GAAD;AAAMC,MAAAA;AAAN,KAAqB;AACtCf,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAF,IAAAA,cAAc,CAACgB,GAAD,CAAd,CAFsC,CAGtC;AACH,GAJD;;AAMA,sBACI;AAAA,2BACI,QAAC,OAAD;AAAA,iBACUf,YAAY,iBACV;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,GAAG,EAAEF;AAAhB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFZ,eAOQ,QAAC,SAAD;AACI,QAAA,WAAW,EAAEF,IADjB;AAEI,QAAA,aAAa,EAAES,MAFnB;AAGI,QAAA,iBAAiB,EAAES,WAHvB;AAII,QAAA,kCAAkC;AAJtC;AAAA;AAAA;AAAA;AAAA,cAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AA2BH,CAlDM;;GAAMnB,U;;MAAAA,U","sourcesContent":["\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { GoogleMap } from './GoogleMap';\nimport { SearchBox } from './SearchBox';\n\nconst Wrapper = styled.main`\n  width: 100%;\n  height: 100%;\n`;\n\nexport const MapWrapper = () => {\n    const [zoom, setZoom] = useState(3);\n    const [mapInstance, setMapInstance] = useState<google.maps.Map>();\n    const [mapApiLoaded, setMapApiLoaded] = useState(false);\n    const places: google.maps.places.PlaceResult[] = [];\n\n    let lat = 0;\n    let lng = 0;\n\n    const [center, setCenter] = useState<google.maps.LatLngLiteral>({ lat, lng });\n\n    const onIdle = (m: google.maps.Map) => {\n        console.log('onIdle');\n        setZoom(m.getZoom()!);\n        setCenter(m.getCenter()!.toJSON());\n    }\n\n    const apiIsLoaded = ({map, maps}: any) => {\n        setMapApiLoaded(true);\n        setMapInstance(map);\n        // setMapApi(maps);\n    }\n\n    return (\n        <>\n            <Wrapper>\n                    { mapApiLoaded &&\n                        <div>\n                            <SearchBox map={mapInstance!} />\n                        </div>\n                    }\n\n                    <GoogleMap\n                        defaultZoom={zoom}\n                        defaultCenter={center}\n                        onGoogleApiLoaded={apiIsLoaded}\n                        yesIWantToUseGoogleMapApiInternals\n                    >\n                        {/* {places.map((place) => (\n                            <Marker\n                                key={place.id}\n                                text={place.name}\n                                lat={place.geometry.location.lat}\n                                lng={place.geometry.location.lng}\n                            />\n                        ))} */}\n                    </GoogleMap>\n            </Wrapper>\n        </>\n    )\n};"]},"metadata":{},"sourceType":"module"}