{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Components/Location/MapWrapper.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { LocationContext } from './LocationsPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MapWrapper = () => {\n  _s();\n\n  const {\n    locationForMap\n  } = useContext(LocationContext);\n  const [zoom, setZoom] = useState(3);\n  let locationMessageSuffix = '';\n  let lat = 0;\n  let lng = 0;\n\n  if (locationForMap) {\n    lat = locationForMap.lat;\n    lng = locationForMap.long;\n    locationMessageSuffix = `for ${locationForMap.name}`;\n  }\n\n  const [center, setCenter] = useState({\n    lat,\n    lng\n  });\n\n  const onIdle = m => {\n    console.log('onIdle');\n    setZoom(m.getZoom());\n    setCenter(m.getCenter().toJSON());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outline w-100 pa3 mr2\",\n      children: [\"A Map Display \", locationMessageSuffix]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"600\",\n      height: \"450\",\n      loading: \"lazy\",\n      allowFullScreen: true,\n      src: \"https://www.google.com/maps/embed/v1/place?key=API_KEY &q=Space+Needle,Seattle+WA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MapWrapper, \"4rR7R8djGO7i4cDbFP/yfUkiM4g=\");\n\n_c = MapWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapWrapper\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Components/Location/MapWrapper.tsx"],"names":["React","useContext","useState","LocationContext","MapWrapper","locationForMap","zoom","setZoom","locationMessageSuffix","lat","lng","long","name","center","setCenter","onIdle","m","console","log","getZoom","getCenter","toJSON"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,SAASC,eAAT,QAAgC,iBAAhC;;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC5B,QAAM;AAACC,IAAAA;AAAD,MAAmBJ,UAAU,CAACE,eAAD,CAAnC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAD,CAAhC;AAEA,MAAIM,qBAAqB,GAAG,EAA5B;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,MAAIL,cAAJ,EAAoB;AAChBI,IAAAA,GAAG,GAAGJ,cAAc,CAACI,GAArB;AACAC,IAAAA,GAAG,GAAGL,cAAc,CAACM,IAArB;AACAH,IAAAA,qBAAqB,GAAI,OAAMH,cAAc,CAACO,IAAK,EAAnD;AACH;;AAED,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAA4B;AAAEO,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAA5B,CAApC;;AAEA,QAAMK,MAAM,GAAIC,CAAD,IAAwB;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAX,IAAAA,OAAO,CAACS,CAAC,CAACG,OAAF,EAAD,CAAP;AACAL,IAAAA,SAAS,CAACE,CAAC,CAACI,SAAF,GAAeC,MAAf,EAAD,CAAT;AACH,GAJD;;AAMA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAE,uBAAhB;AAAA,mCAAuDb,qBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI;AACI,MAAA,KAAK,EAAC,KADV;AAEI,MAAA,MAAM,EAAC,KAFX;AAGI,MAAA,OAAO,EAAC,MAHZ;AAII,MAAA,eAAe,MAJnB;AAKI,MAAA,GAAG,EAAC;AALR;AAAA;AAAA;AAAA;AAAA,YAbJ,eAqBI;AAAK,MAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,YArBJ;AAAA,kBADJ;AAyBH,CA/CM;;GAAMJ,U;;KAAAA,U","sourcesContent":["import React, { useContext, useState } from 'react';\n\nimport { LocationContext } from './LocationsPage';\n\nexport const MapWrapper = () => {\n    const {locationForMap} = useContext(LocationContext);\n    const [zoom, setZoom] = useState(3);\n\n    let locationMessageSuffix = '';\n    let lat = 0; \n    let lng = 0;\n\n    if (locationForMap) {\n        lat = locationForMap.lat;\n        lng = locationForMap.long;\n        locationMessageSuffix = `for ${locationForMap.name}`;\n    }\n\n    const [center, setCenter] = useState<google.maps.LatLngLiteral>({ lat, lng });\n    \n    const onIdle = (m: google.maps.Map) => {\n        console.log('onIdle');\n        setZoom(m.getZoom()!);\n        setCenter(m.getCenter()!.toJSON());\n    }\n\n    return (\n        <>\n            <div className =\"outline w-100 pa3 mr2\">A Map Display {locationMessageSuffix}</div>\n            {/* <Wrapper apiKey={\"\"}>\n                <Map\n                    center={center}\n                    onIdle={onIdle}\n                    zoom={zoom}\n                    style={{ flexGrow: \"1\", height: \"100%\" }}\n                >\n                    <Marker position={center}/>\n                </Map>\n            </Wrapper> */}\n\n            <iframe\n                width=\"600\"\n                height=\"450\"\n                loading=\"lazy\"\n                allowFullScreen\n                src=\"https://www.google.com/maps/embed/v1/place?key=API_KEY\n    &q=Space+Needle,Seattle+WA\">\n            </iframe>\n            <div id=\"map\"></div>\n        </>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}