{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Components/Modal/SearchBox.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { LocationContext } from '../../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n_c = Wrapper;\nexport const SearchBox = _ref => {\n  _s();\n\n  let {\n    map\n  } = _ref;\n  const [searchBox, setSearchBox] = useState();\n  const ref = useRef(null);\n  let markers = [];\n  const {\n    setLocationForMap\n  } = useContext(LocationContext);\n  useEffect(() => {\n    if (ref.current) {\n      setSearchBox(new google.maps.places.SearchBox(ref.current));\n    }\n  }, [ref]);\n  const onBoundsChanged = useCallback(() => {\n    console.log('on bounds changed');\n    searchBox.setBounds(map.getBounds());\n  }, [searchBox, map]);\n  const onPlacesChanged = useCallback(() => {\n    console.log('on places changed');\n    const places = searchBox.getPlaces();\n\n    if (places.length === 0) {\n      return;\n    }\n\n    markers.forEach(marker => {\n      marker.setMap(null);\n    });\n    markers = [];\n    const bounds = new google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (!place.geometry || !place.geometry.location) {\n        console.log(\"Returned place contains no geometry\");\n        return;\n      }\n\n      const icon = {\n        url: place.icon,\n        size: new google.maps.Size(71, 71),\n        origin: new google.maps.Point(0, 0),\n        anchor: new google.maps.Point(17, 34),\n        scaledSize: new google.maps.Size(25, 25)\n      };\n      markers.push(new google.maps.Marker({\n        map,\n        icon,\n        title: place.name,\n        position: place.geometry.location\n      }));\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n\n    if (markers.length == 1) {\n      setLocationForMap({});\n    }\n\n    map.fitBounds(bounds);\n  }, [searchBox, map]);\n  useEffect(() => {\n    if (searchBox) {\n      map.addListener('bounds_changed', onBoundsChanged);\n      searchBox.addListener('places_changed', onPlacesChanged);\n      console.log('added listener');\n      return () => {\n        google.maps.event.clearListeners(map, 'bounds_changed');\n        google.maps.event.clearListeners(searchBox, 'places_changed');\n        console.log('removed listener');\n      };\n    }\n  }, [map, searchBox, onBoundsChanged, onPlacesChanged]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: ref,\n      type: \"text\",\n      placeholder: \"Enter a location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBox, \"dDUZJW0OIH6/rhn+NAYeaA1kCiY=\");\n\n_c2 = SearchBox;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"SearchBox\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Components/Modal/SearchBox.tsx"],"names":["React","useCallback","useContext","useEffect","useRef","useState","styled","LocationContext","Wrapper","div","SearchBox","map","searchBox","setSearchBox","ref","markers","setLocationForMap","current","google","maps","places","onBoundsChanged","console","log","setBounds","getBounds","onPlacesChanged","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","location","icon","url","size","Size","origin","Point","anchor","scaledSize","push","Marker","title","name","position","viewport","union","extend","fitBounds","addListener","event","clearListeners"],"mappings":"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","sourcesContent":["import React, { FC, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { markAsUntransferable } from 'worker_threads';\nimport { LocationContext } from '../../App';\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n\ninterface SearchBoxProps {\n    map: google.maps.Map;\n    mapApi?: any\n}\n\nexport const SearchBox: FC<SearchBoxProps> = ({ map }: SearchBoxProps) => {\n    const [searchBox, setSearchBox] = useState<google.maps.places.SearchBox>();\n    const ref = useRef<HTMLInputElement>(null);\n    let markers: google.maps.Marker[] = [];\n    const {setLocationForMap} = useContext(LocationContext);\n\n    useEffect(() => {\n        if (ref.current) {\n            setSearchBox(new google.maps.places.SearchBox(ref.current));\n\n        }\n    }, [ref]);\n\n    const onBoundsChanged = useCallback(() => {\n        console.log('on bounds changed')\n        searchBox!.setBounds(map.getBounds() as google.maps.LatLngBounds);\n    }, [searchBox, map]);\n\n    const onPlacesChanged = useCallback(() => {\n        console.log('on places changed')\n        \n        const places = searchBox!.getPlaces();\n        if (places.length === 0) {\n            return;\n        }\n\n        markers.forEach((marker) => {\n            marker.setMap(null);\n        });\n\n        markers = [];\n\n        const bounds = new google.maps.LatLngBounds();\n\n        places.forEach((place) => {\n            if (!place.geometry || !place.geometry.location) {\n                console.log(\"Returned place contains no geometry\");\n                return;\n            }\n\n            const icon = {\n                url: place.icon as string,\n                size: new google.maps.Size(71, 71),\n                origin: new google.maps.Point(0, 0),\n                anchor: new google.maps.Point(17, 34),\n                scaledSize: new google.maps.Size(25, 25),\n            };\n\n            markers.push(\n                new google.maps.Marker({\n                    map,\n                    icon,\n                    title: place.name,\n                    position: place.geometry.location,\n                })\n            );\n\n            if (place.geometry.viewport) {\n                // Only geocodes have viewport\n                bounds.union(place.geometry.viewport);\n            } else {\n                bounds.extend(place.geometry.location);\n            }\n\n        });\n\n        if(markers.length == 1) {\n            setLocationForMap({\n                \n            });\n        }\n        map.fitBounds(bounds);\n    }, [searchBox, map]);\n\n    useEffect(() => {\n        if(searchBox) {\n            map.addListener('bounds_changed', onBoundsChanged)\n            searchBox.addListener('places_changed', onPlacesChanged);\n            console.log('added listener')\n\n            return () => {\n                google.maps.event.clearListeners(map, 'bounds_changed');\n                google.maps.event.clearListeners(searchBox, 'places_changed');\n                console.log('removed listener')\n            }\n        }\n    }, [map, searchBox, onBoundsChanged, onPlacesChanged]);\n\n    return (\n        <Wrapper>\n            <input\n                ref={ref}\n                type=\"text\"\n                placeholder=\"Enter a location\"\n            />\n        </Wrapper>\n    );\n};"]},"metadata":{},"sourceType":"module"}