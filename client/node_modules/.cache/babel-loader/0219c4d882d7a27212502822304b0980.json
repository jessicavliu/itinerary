{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Components/GoogleMapsUtils/Map.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDeepCompareEffectForMaps } from './GoogleMapsUtils';\nimport { Marker } from './Marker';\nimport { SearchBox } from './SearchBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Map = _ref => {\n  _s();\n\n  let {\n    onIdle,\n    style,\n    children,\n    ...options\n  } = _ref;\n  const ref = useRef(null);\n  const [map, setMap] = useState();\n  useEffect(() => {\n    if (ref.current && !map) {\n      setMap(new window.google.maps.Map(ref.current, {}));\n    }\n  }, [ref, map]);\n  useDeepCompareEffectForMaps(() => {\n    if (map) {\n      map.setOptions(options);\n    }\n  }, [map, options]);\n  useEffect(() => {\n    if (map) {\n      ['idle'].forEach(eventName => {\n        google.maps.event.clearListeners(map, eventName);\n      });\n\n      if (onIdle) {\n        map.addListener('idle', () => onIdle(map));\n      }\n    }\n  }, [map, onIdle]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [map && /*#__PURE__*/_jsxDEV(SearchBox, {\n      map: map\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Marker, {\n      position: center\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), React.Children.map(children, child => {\n      if ( /*#__PURE__*/React.isValidElement(child)) {\n        return /*#__PURE__*/React.cloneElement(child, {\n          map\n        });\n      }\n    })]\n  }, void 0, true);\n};\n\n_s(Map, \"opLBIwkqaylsb+d//rXdw+ITIbA=\", false, function () {\n  return [useDeepCompareEffectForMaps];\n});\n\n_c = Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Components/GoogleMapsUtils/Map.tsx"],"names":["React","useEffect","useRef","useState","useDeepCompareEffectForMaps","Marker","SearchBox","Map","onIdle","style","children","options","ref","map","setMap","current","window","google","maps","setOptions","forEach","eventName","event","clearListeners","addListener","center","Children","child","isValidElement","cloneElement"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AAEA,SAASC,2BAAT,QAA4C,mBAA5C;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,SAAT,QAA0B,aAA1B;;;AAQA,OAAO,MAAMC,GAAiB,GAAG,QAAqD;AAAA;;AAAA,MAApD;AAACC,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,QAAhB;AAA0B,OAAGC;AAA7B,GAAoD;AAClF,QAAMC,GAAG,GAAGV,MAAM,CAAiB,IAAjB,CAAlB;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,EAA9B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGW,GAAG,CAACG,OAAJ,IAAe,CAACF,GAAnB,EAAwB;AACpBC,MAAAA,MAAM,CAAC,IAAIE,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBX,GAAvB,CAA2BK,GAAG,CAACG,OAA/B,EAAwC,EAAxC,CAAD,CAAN;AACH;AACJ,GAJQ,EAIN,CAACH,GAAD,EAAMC,GAAN,CAJM,CAAT;AAMAT,EAAAA,2BAA2B,CAAC,MAAM;AAC9B,QAAGS,GAAH,EAAQ;AACJA,MAAAA,GAAG,CAACM,UAAJ,CAAeR,OAAf;AACH;AACJ,GAJ0B,EAIxB,CAACE,GAAD,EAAMF,OAAN,CAJwB,CAA3B;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGY,GAAH,EAAQ;AACJ,OAAC,MAAD,EAASO,OAAT,CAAkBC,SAAD,IAAe;AAC5BJ,QAAAA,MAAM,CAACC,IAAP,CAAYI,KAAZ,CAAkBC,cAAlB,CAAiCV,GAAjC,EAAsCQ,SAAtC;AACH,OAFD;;AAIA,UAAIb,MAAJ,EAAY;AACRK,QAAAA,GAAG,CAACW,WAAJ,CAAgB,MAAhB,EAAwB,MAAMhB,MAAM,CAACK,GAAD,CAApC;AACH;AACJ;AACJ,GAVQ,EAUN,CAACA,GAAD,EAAML,MAAN,CAVM,CAAT;AAYA,sBACI;AAAA,eACMK,GAAG,iBAAI,QAAC,SAAD;AAAW,MAAA,GAAG,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,YADb,eAEI;AAAK,MAAA,GAAG,EAAED,GAAV;AAAe,MAAA,KAAK,EAAEH;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEgB;AAAlB;AAAA;AAAA;AAAA;AAAA,YAHJ,EAKKzB,KAAK,CAAC0B,QAAN,CAAeb,GAAf,CAAmBH,QAAnB,EAA8BiB,KAAD,IAAW;AACrC,wBAAI3B,KAAK,CAAC4B,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;AAC7B,4BAAO3B,KAAK,CAAC6B,YAAN,CAAmBF,KAAnB,EAA0B;AAAEd,UAAAA;AAAF,SAA1B,CAAP;AACH;AACJ,KAJA,CALL;AAAA,kBADJ;AAaH,CAzCM;;GAAMN,G;UAUTH,2B;;;KAVSG,G","sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react';\n\nimport { useDeepCompareEffectForMaps } from './GoogleMapsUtils';\nimport { Marker } from './Marker';\nimport { SearchBox } from './SearchBox';\n\ninterface MapProps extends google.maps.MapOptions {\n    style: { [key: string]: string };\n    onIdle?: (map: google.maps.Map) => void;\n    children?: React.ReactNode,\n}\n\nexport const Map: FC<MapProps> = ({onIdle, style, children, ...options}: MapProps) => {\n    const ref = useRef<HTMLDivElement>(null);\n    const [map, setMap] = useState<google.maps.Map>();\n\n    useEffect(() => {\n        if(ref.current && !map) {\n            setMap(new window.google.maps.Map(ref.current, {}))\n        }\n    }, [ref, map]);\n    \n    useDeepCompareEffectForMaps(() => {\n        if(map) {\n            map.setOptions(options);\n        }\n    }, [map, options])\n\n    useEffect(() => {\n        if(map) {\n            ['idle'].forEach((eventName) => {\n                google.maps.event.clearListeners(map, eventName);\n            });\n\n            if (onIdle) {\n                map.addListener('idle', () => onIdle(map));\n            }\n        }\n    }, [map, onIdle]);\n\n    return (\n        <>\n            { map && <SearchBox map={map!} /> }\n            <div ref={ref} style={style} />\n            <Marker position={center} />\n            \n            {React.Children.map(children, (child) => {\n                if (React.isValidElement(child)) {\n                    return React.cloneElement(child, { map });\n                }\n            })}\n        </>\n    );\n};"]},"metadata":{},"sourceType":"module"}