{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Components/GoogleMapsUtils/SearchBox.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchBox = _ref => {\n  _s();\n\n  let {\n    map\n  } = _ref;\n  const [searchBox, setSearchBox] = useState();\n  const ref = useRef(null);\n  let markers = [];\n  useEffect(() => {\n    if (ref.current && map) {\n      setSearchBox(new google.maps.places.SearchBox(ref.current));\n      map.controls[google.maps.ControlPosition.TOP_LEFT].push(ref.current);\n    }\n  }, [ref, map]);\n\n  const onBoundsChanged = () => {\n    searchBox.setBounds(map.getBounds());\n  };\n\n  const onPlacesChanged = () => {\n    const places = searchBox.getPlaces();\n\n    if (places.length == 0) {\n      return;\n    }\n\n    markers.forEach(marker => {\n      marker.setMap(null);\n    });\n    markers = [];\n    const bounds = new google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (!place.geometry || !place.geometry.location) {\n        console.log(\"Returned place contains no geometry\");\n        return;\n      }\n\n      const icon = {\n        url: place.icon,\n        size: new google.maps.Size(71, 71),\n        origin: new google.maps.Point(0, 0),\n        anchor: new google.maps.Point(17, 34),\n        scaledSize: new google.maps.Size(25, 25)\n      };\n      markers.push(new google.maps.Marker({\n        map,\n        icon,\n        title: place.name,\n        position: place.geometry.location\n      }));\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    map.fitBounds(bounds);\n  };\n\n  map.addListener(\"bounds-changed\", onBoundsChanged);\n  map.addListener(\"places-changed\", onPlacesChanged);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: ref,\n      type: \"text\",\n      placeholder: \"Type location here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SearchBox, \"n8zwKKsB914dxW2BTsYwmAqu+gs=\");\n\n_c = SearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Components/GoogleMapsUtils/SearchBox.tsx"],"names":["React","useEffect","useRef","useState","SearchBox","map","searchBox","setSearchBox","ref","markers","current","google","maps","places","controls","ControlPosition","TOP_LEFT","push","onBoundsChanged","setBounds","getBounds","onPlacesChanged","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","location","console","log","icon","url","size","Size","origin","Point","anchor","scaledSize","Marker","title","name","position","viewport","union","extend","fitBounds","addListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;;;AAMA,OAAO,MAAMC,SAA6B,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAAEC,IAAAA;AAAF,GAA4B;AACtE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,EAA1C;AACA,QAAMK,GAAG,GAAGN,MAAM,CAAmB,IAAnB,CAAlB;AACA,MAAIO,OAA6B,GAAG,EAApC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGO,GAAG,CAACE,OAAJ,IAAeL,GAAlB,EAAuB;AACnBE,MAAAA,YAAY,CAAC,IAAII,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBT,SAAvB,CAAiCI,GAAG,CAACE,OAArC,CAAD,CAAZ;AACAL,MAAAA,GAAG,CAACS,QAAJ,CAAaH,MAAM,CAACC,IAAP,CAAYG,eAAZ,CAA4BC,QAAzC,EAAmDC,IAAnD,CAAwDT,GAAG,CAACE,OAA5D;AACH;AACJ,GALQ,EAKN,CAACF,GAAD,EAAMH,GAAN,CALM,CAAT;;AAOA,QAAMa,eAAe,GAAG,MAAM;AAC1BZ,IAAAA,SAAS,CAAEa,SAAX,CAAqBd,GAAG,CAACe,SAAJ,EAArB;AACH,GAFD;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC1B,UAAMR,MAAM,GAAGP,SAAS,CAAEgB,SAAX,EAAf;;AACA,QAAIT,MAAM,CAACU,MAAP,IAAiB,CAArB,EAAwB;AACpB;AACH;;AAEDd,IAAAA,OAAO,CAACe,OAAR,CAAiBC,MAAD,IAAY;AACxBA,MAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH,KAFD;AAIAjB,IAAAA,OAAO,GAAG,EAAV;AAEA,UAAMkB,MAAM,GAAG,IAAIhB,MAAM,CAACC,IAAP,CAAYgB,YAAhB,EAAf;AAEAf,IAAAA,MAAM,CAACW,OAAP,CAAgBK,KAAD,IAAW;AACtB,UAAI,CAACA,KAAK,CAACC,QAAP,IAAmB,CAACD,KAAK,CAACC,QAAN,CAAeC,QAAvC,EAAiD;AAC7CC,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA;AACH;;AAED,YAAMC,IAAI,GAAG;AACTC,QAAAA,GAAG,EAAEN,KAAK,CAACK,IADF;AAETE,QAAAA,IAAI,EAAE,IAAIzB,MAAM,CAACC,IAAP,CAAYyB,IAAhB,CAAqB,EAArB,EAAyB,EAAzB,CAFG;AAGTC,QAAAA,MAAM,EAAE,IAAI3B,MAAM,CAACC,IAAP,CAAY2B,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAHC;AAITC,QAAAA,MAAM,EAAE,IAAI7B,MAAM,CAACC,IAAP,CAAY2B,KAAhB,CAAsB,EAAtB,EAA0B,EAA1B,CAJC;AAKTE,QAAAA,UAAU,EAAE,IAAI9B,MAAM,CAACC,IAAP,CAAYyB,IAAhB,CAAqB,EAArB,EAAyB,EAAzB;AALH,OAAb;AAQA5B,MAAAA,OAAO,CAACQ,IAAR,CACI,IAAIN,MAAM,CAACC,IAAP,CAAY8B,MAAhB,CAAuB;AACnBrC,QAAAA,GADmB;AAEnB6B,QAAAA,IAFmB;AAGnBS,QAAAA,KAAK,EAAEd,KAAK,CAACe,IAHM;AAInBC,QAAAA,QAAQ,EAAEhB,KAAK,CAACC,QAAN,CAAeC;AAJN,OAAvB,CADJ;;AASA,UAAIF,KAAK,CAACC,QAAN,CAAegB,QAAnB,EAA6B;AACzB;AACAnB,QAAAA,MAAM,CAACoB,KAAP,CAAalB,KAAK,CAACC,QAAN,CAAegB,QAA5B;AACH,OAHD,MAGO;AACHnB,QAAAA,MAAM,CAACqB,MAAP,CAAcnB,KAAK,CAACC,QAAN,CAAeC,QAA7B;AACH;AAEJ,KA9BD;AA+BA1B,IAAAA,GAAG,CAAC4C,SAAJ,CAActB,MAAd;AACH,GA9CD;;AAgDAtB,EAAAA,GAAG,CAAC6C,WAAJ,CAAgB,gBAAhB,EAAkChC,eAAlC;AACAb,EAAAA,GAAG,CAAC6C,WAAJ,CAAgB,gBAAhB,EAAkC7B,eAAlC;AAEA,sBACI;AAAA,2BACI;AAAO,MAAA,GAAG,EAAEb,GAAZ;AAAiB,MAAA,IAAI,EAAC,MAAtB;AAA6B,MAAA,WAAW,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH,CAxEM;;GAAMJ,S;;KAAAA,S","sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react';\n\ninterface SearchBoxProps {\n    map: google.maps.Map;\n}\n\nexport const SearchBox: FC<SearchBoxProps> = ({ map }: SearchBoxProps) => {\n    const [searchBox, setSearchBox] = useState<google.maps.places.SearchBox>();\n    const ref = useRef<HTMLInputElement>(null);\n    let markers: google.maps.Marker[] = [];\n\n    useEffect(() => {\n        if(ref.current && map) {\n            setSearchBox(new google.maps.places.SearchBox(ref.current));\n            map.controls[google.maps.ControlPosition.TOP_LEFT].push(ref.current);\n        }\n    }, [ref, map]);\n\n    const onBoundsChanged = () => {\n        searchBox!.setBounds(map.getBounds() as google.maps.LatLngBounds);\n    };\n\n    const onPlacesChanged = () => {\n        const places = searchBox!.getPlaces();\n        if (places.length == 0) {\n            return;\n        }\n\n        markers.forEach((marker) => {\n            marker.setMap(null);\n        });\n\n        markers = [];\n\n        const bounds = new google.maps.LatLngBounds();\n\n        places.forEach((place) => {\n            if (!place.geometry || !place.geometry.location) {\n                console.log(\"Returned place contains no geometry\");\n                return;\n            }\n\n            const icon = {\n                url: place.icon as string,\n                size: new google.maps.Size(71, 71),\n                origin: new google.maps.Point(0, 0),\n                anchor: new google.maps.Point(17, 34),\n                scaledSize: new google.maps.Size(25, 25),\n            };\n\n            markers.push(\n                new google.maps.Marker({\n                    map,\n                    icon,\n                    title: place.name,\n                    position: place.geometry.location,\n                })\n            );\n\n            if (place.geometry.viewport) {\n                // Only geocodes have viewport\n                bounds.union(place.geometry.viewport);\n            } else {\n                bounds.extend(place.geometry.location);\n            }\n\n        });\n        map.fitBounds(bounds);\n    }\n\n    map.addListener(\"bounds-changed\", onBoundsChanged)\n    map.addListener(\"places-changed\", onPlacesChanged);\n\n    return (\n        <>\n            <input ref={ref} type='text' placeholder='Type location here'></input>\n        </>\n    );\n};"]},"metadata":{},"sourceType":"module"}