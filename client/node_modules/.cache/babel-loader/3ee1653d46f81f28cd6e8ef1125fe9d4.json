{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Components/Modal/AddLocationModal.tsx\",\n    _s = $RefreshSig$();\n\nimport '../../styles/modal.css';\nimport '../../styles/map.css';\nimport { MapWrapper } from './MapWrapper';\nimport { mockItineraries } from '../../Models/MockItineraries';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { getItineraryById } from '../../Services/ItineraryService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddLocationModal = _ref => {\n  _s();\n\n  let {\n    show,\n    handleClose\n  } = _ref;\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n  const ref = useRef(null);\n  const [dropdownValue, setDropdownValue] = useState('');\n  useEffect(() => {\n    if (ref.current) {\n      setDropdownValue(ref.current.value);\n    }\n  }, [ref]);\n  const handleAddLocationToItinerary = useCallback(() => {\n    getItineraryById(parseInt(dropdownValue)); // update location db to have associated itinerary\n\n    console.log('added location to itinerary');\n    handleClose();\n  }, [handleClose]);\n  console.log('rerender location modal');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: showHideClassName,\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"modal-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(MapWrapper, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Add to itineraries: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          ref: ref,\n          children: mockItineraries.map(itinerary => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: itinerary.id,\n            children: itinerary.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAddLocationToItinerary,\n        children: \"Add location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddLocationModal, \"9HPdI1MmFNvNRZfvIDBGCVmTZ7c=\");\n\n_c = AddLocationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLocationModal\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Components/Modal/AddLocationModal.tsx"],"names":["MapWrapper","mockItineraries","useCallback","useEffect","useRef","useState","getItineraryById","AddLocationModal","show","handleClose","showHideClassName","ref","dropdownValue","setDropdownValue","current","value","handleAddLocationToItinerary","parseInt","console","log","map","itinerary","id","name"],"mappings":";;;AAAA,OAAO,wBAAP;AACA,OAAO,sBAAP;AACA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AAEA,SAASC,gBAAT,QAAiC,iCAAjC;;AAOA,OAAO,MAAMC,gBAAgB,GAAG,QAAkD;AAAA;;AAAA,MAAjD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAiD;AAC9E,QAAMC,iBAAiB,GAAGF,IAAI,GAAG,qBAAH,GAA2B,oBAAzD;AACA,QAAMG,GAAG,GAAGP,MAAM,CAAoB,IAApB,CAAlB;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGQ,GAAG,CAACG,OAAP,EAAgB;AACZD,MAAAA,gBAAgB,CAACF,GAAG,CAACG,OAAJ,CAAYC,KAAb,CAAhB;AACH;AACJ,GAJQ,EAIN,CAACJ,GAAD,CAJM,CAAT;AAMA,QAAMK,4BAA4B,GAAGd,WAAW,CAAC,MAAM;AAEnDI,IAAAA,gBAAgB,CAACW,QAAQ,CAACL,aAAD,CAAT,CAAhB,CAFmD,CAInD;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AAEAV,IAAAA,WAAW;AACd,GAR+C,EAQ7C,CAACA,WAAD,CAR6C,CAAhD;AAWAS,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAEA,sBACI;AAAK,IAAA,SAAS,EAAET,iBAAhB;AAAA,2BACI;AAAS,MAAA,SAAS,EAAC,YAAnB;AAAA,8BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAED,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAQ,UAAA,GAAG,EAAEE,GAAb;AAAA,oBAEQV,eAAe,CAACmB,GAAhB,CAAoBC,SAAS,iBACzB;AAAQ,YAAA,KAAK,EAAEA,SAAS,CAACC,EAAzB;AAAA,sBAA8BD,SAAS,CAACE;AAAxC;AAAA;AAAA;AAAA;AAAA,kBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAiBI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEP,4BAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CAjDM;;GAAMT,gB;;KAAAA,gB","sourcesContent":["import '../../styles/modal.css';\nimport '../../styles/map.css';\nimport { MapWrapper } from './MapWrapper';\nimport { mockItineraries } from '../../Models/MockItineraries';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { mockLocations } from '../../Models/MockLocations';\nimport { getItineraryById } from '../../Services/ItineraryService';\n\ninterface AddLocationModalProps {\n    show: boolean;\n    handleClose: () => void;\n}\n\nexport const AddLocationModal = ({ show, handleClose }: AddLocationModalProps) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n    const ref = useRef<HTMLSelectElement>(null);\n    const [dropdownValue, setDropdownValue] = useState('');\n\n    useEffect(() => {\n        if(ref.current) {\n            setDropdownValue(ref.current.value);\n        }\n    }, [ref]);\n\n    const handleAddLocationToItinerary = useCallback(() => {\n        \n        getItineraryById(parseInt(dropdownValue));\n\n        // update location db to have associated itinerary\n        console.log('added location to itinerary')\n\n        handleClose();\n    }, [handleClose]);\n\n\n    console.log('rerender location modal');\n\n    return (\n        <div className={showHideClassName}>\n            <section className=\"modal-main\">\n                <button type=\"button\" onClick={handleClose}>\n                    Close\n                </button>\n                <div className=\"main-wrapper\">\n                    <MapWrapper />\n                </div>\n                <div>\n                    <span>Add to itineraries: </span>\n                    <select ref={ref}>\n                        {\n                            mockItineraries.map(itinerary => (\n                                <option value={itinerary.id}>{itinerary.name}</option>\n                            ))\n                        }\n                    </select>\n                </div>\n                <button type=\"button\" onClick={handleAddLocationToItinerary}>\n                    Add location\n                </button>\n            </section>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}