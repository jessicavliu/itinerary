{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Modal/AddLocationModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { Wrapper } from '@googlemaps/react-wrapper';\nimport React, { useState } from 'react';\nimport { Map } from '../Components/GoogleMapsUtils/Map';\nimport { Marker } from '../Components/GoogleMapsUtils/Marker';\nimport '../styles/modal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddLocationModal = _ref => {\n  _s();\n\n  let {\n    show,\n    handleClose\n  } = _ref;\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n  const [zoom, setZoom] = useState(3);\n  let lat = 0;\n  let lng = 0;\n  const [center, setCenter] = useState({\n    lat,\n    lng\n  });\n\n  const onIdle = m => {\n    console.log('onIdle');\n    setZoom(m.getZoom());\n    setCenter(m.getCenter().toJSON());\n  };\n\n  const onBoundsChanged = () => {\n    searchBox.setBounds(map.getBounds);\n  };\n\n  const onPlacesChanged = () => {\n    const places = searchBox.getPlaces();\n\n    if (places.length == 0) {\n      return;\n    }\n\n    markers.forEach(marker => {\n      marker.setMap(null);\n    });\n    markers = [];\n    const bounds = new google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (!place.geometry || !place.geometry.location) {\n        console.log(\"Returned place contains no geometry\");\n        return;\n      }\n\n      const icon = {\n        url: place.icon,\n        size: new google.maps.Size(71, 71),\n        origin: new google.maps.Point(0, 0),\n        anchor: new google.maps.Point(17, 34),\n        scaledSize: new google.maps.Size(25, 25)\n      };\n      markers.push(new google.maps.Marker({\n        map,\n        icon,\n        title: place.name,\n        position: place.geometry.location\n      }));\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    map.fitBounds(bounds);\n  };\n\n  const searchBox = new google.maps.places.SearchBox(input);\n  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n  let markers = [];\n  map.addListener(\"bounds-changed\", onBoundsChanged);\n  map.addListener(\"places-changed\", onPlacesChanged);\n\n  const handleAddLocationToItinerary = () => {\n    // update location db to have associated itinerary\n    console.log('added location to itinerary');\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: showHideClassName,\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"modal-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n          apiKey: \"\",\n          children: /*#__PURE__*/_jsxDEV(Map, {\n            center: center,\n            onIdle: onIdle,\n            zoom: zoom,\n            style: {\n              flexGrow: \"1\",\n              height: \"100%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Marker, {\n              position: center\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Add to itineraries: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          children: /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"itinerary 1\",\n            children: \"Itinerary 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleAddLocationToItinerary,\n        children: \"Add location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddLocationModal, \"a4vtBfqKcczXSe21xPnfYBUKigo=\");\n\n_c = AddLocationModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLocationModal\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Modal/AddLocationModal.tsx"],"names":["Wrapper","React","useState","Map","Marker","AddLocationModal","show","handleClose","showHideClassName","zoom","setZoom","lat","lng","center","setCenter","onIdle","m","console","log","getZoom","getCenter","toJSON","onBoundsChanged","searchBox","setBounds","map","getBounds","onPlacesChanged","places","getPlaces","length","markers","forEach","marker","setMap","bounds","google","maps","LatLngBounds","place","geometry","location","icon","url","size","Size","origin","Point","anchor","scaledSize","push","title","name","position","viewport","union","extend","fitBounds","SearchBox","input","controls","ControlPosition","TOP_LEFT","addListener","handleAddLocationToItinerary","flexGrow","height"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,GAAT,QAAoB,mCAApB;AACA,SAASC,MAAT,QAAuB,sCAAvB;AACA,OAAO,qBAAP;;AAOA,OAAO,MAAMC,gBAAgB,GAAG,QAAkD;AAAA;;AAAA,MAAjD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAiD;AAC9E,QAAMC,iBAAiB,GAAGF,IAAI,GAAG,qBAAH,GAA2B,oBAAzD;AAEA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AAEA,MAAIS,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAA4B;AAAES,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAA5B,CAApC;;AAEA,QAAMG,MAAM,GAAIC,CAAD,IAAwB;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAR,IAAAA,OAAO,CAACM,CAAC,CAACG,OAAF,EAAD,CAAP;AACAL,IAAAA,SAAS,CAACE,CAAC,CAACI,SAAF,GAAeC,MAAf,EAAD,CAAT;AACH,GAJD;;AAMA,QAAMC,eAAe,GAAG,MAAM;AAC1BC,IAAAA,SAAS,CAACC,SAAV,CAAoBC,GAAG,CAACC,SAAxB;AACH,GAFD;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAC1B,UAAMC,MAAM,GAAGL,SAAS,CAACM,SAAV,EAAf;;AACA,QAAID,MAAM,CAACE,MAAP,IAAiB,CAArB,EAAwB;AACpB;AACH;;AAEDC,IAAAA,OAAO,CAACC,OAAR,CAAiBC,MAAD,IAAY;AACxBA,MAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACH,KAFD;AAIAH,IAAAA,OAAO,GAAG,EAAV;AAEA,UAAMI,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,YAAhB,EAAf;AAEAV,IAAAA,MAAM,CAACI,OAAP,CAAgBO,KAAD,IAAW;AACtB,UAAI,CAACA,KAAK,CAACC,QAAP,IAAmB,CAACD,KAAK,CAACC,QAAN,CAAeC,QAAvC,EAAiD;AAC7CxB,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA;AACH;;AAED,YAAMwB,IAAI,GAAG;AACTC,QAAAA,GAAG,EAAEJ,KAAK,CAACG,IADF;AAETE,QAAAA,IAAI,EAAE,IAAIR,MAAM,CAACC,IAAP,CAAYQ,IAAhB,CAAqB,EAArB,EAAyB,EAAzB,CAFG;AAGTC,QAAAA,MAAM,EAAE,IAAIV,MAAM,CAACC,IAAP,CAAYU,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAHC;AAITC,QAAAA,MAAM,EAAE,IAAIZ,MAAM,CAACC,IAAP,CAAYU,KAAhB,CAAsB,EAAtB,EAA0B,EAA1B,CAJC;AAKTE,QAAAA,UAAU,EAAE,IAAIb,MAAM,CAACC,IAAP,CAAYQ,IAAhB,CAAqB,EAArB,EAAyB,EAAzB;AALH,OAAb;AAQAd,MAAAA,OAAO,CAACmB,IAAR,CACI,IAAId,MAAM,CAACC,IAAP,CAAYjC,MAAhB,CAAuB;AACnBqB,QAAAA,GADmB;AAEnBiB,QAAAA,IAFmB;AAGnBS,QAAAA,KAAK,EAAEZ,KAAK,CAACa,IAHM;AAInBC,QAAAA,QAAQ,EAAEd,KAAK,CAACC,QAAN,CAAeC;AAJN,OAAvB,CADJ;;AASA,UAAIF,KAAK,CAACC,QAAN,CAAec,QAAnB,EAA6B;AACzB;AACAnB,QAAAA,MAAM,CAACoB,KAAP,CAAahB,KAAK,CAACC,QAAN,CAAec,QAA5B;AACH,OAHD,MAGO;AACHnB,QAAAA,MAAM,CAACqB,MAAP,CAAcjB,KAAK,CAACC,QAAN,CAAeC,QAA7B;AACH;AAEJ,KA9BD;AA+BAhB,IAAAA,GAAG,CAACgC,SAAJ,CAActB,MAAd;AACH,GA9CD;;AAgDA,QAAMZ,SAAS,GAAG,IAAIa,MAAM,CAACC,IAAP,CAAYT,MAAZ,CAAmB8B,SAAvB,CAAiCC,KAAjC,CAAlB;AACAlC,EAAAA,GAAG,CAACmC,QAAJ,CAAaxB,MAAM,CAACC,IAAP,CAAYwB,eAAZ,CAA4BC,QAAzC,EAAmDZ,IAAnD,CAAwDS,KAAxD;AACA,MAAI5B,OAA6B,GAAG,EAApC;AAEAN,EAAAA,GAAG,CAACsC,WAAJ,CAAgB,gBAAhB,EAAkCzC,eAAlC;AACAG,EAAAA,GAAG,CAACsC,WAAJ,CAAgB,gBAAhB,EAAkCpC,eAAlC;;AAEA,QAAMqC,4BAA4B,GAAG,MAAM;AACvC;AACA/C,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AAEAX,IAAAA,WAAW;AACd,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAEC,iBAAhB;AAAA,2BACI;AAAS,MAAA,SAAS,EAAC,YAAnB;AAAA,8BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAED,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAA,gCACI;AAAO,UAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,OAAD;AAAS,UAAA,MAAM,EAAE,EAAjB;AAAA,iCACI,QAAC,GAAD;AACI,YAAA,MAAM,EAAEM,MADZ;AAEI,YAAA,MAAM,EAAEE,MAFZ;AAGI,YAAA,IAAI,EAAEN,IAHV;AAII,YAAA,KAAK,EAAE;AAAEwD,cAAAA,QAAQ,EAAE,GAAZ;AAAiBC,cAAAA,MAAM,EAAE;AAAzB,aAJX;AAAA,mCAMI,QAAC,MAAD;AAAQ,cAAA,QAAQ,EAAErD;AAAlB;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbJ,eAcI;AAAA,iCACI;AAAQ,YAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAsBI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEmD,4BAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH,CAhHM;;GAAM3D,gB;;KAAAA,gB","sourcesContent":["import { Wrapper } from '@googlemaps/react-wrapper';\nimport React, { useState } from 'react';\n\nimport { Map } from '../Components/GoogleMapsUtils/Map';\nimport { Marker } from '../Components/GoogleMapsUtils/Marker';\nimport '../styles/modal.css';\n\ninterface AddLocationModalProps {\n    show: boolean;\n    handleClose: () => void;\n}\n\nexport const AddLocationModal = ({ show, handleClose }: AddLocationModalProps) => {\n    const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n    const [zoom, setZoom] = useState(3);\n\n    let lat = 0;\n    let lng = 0;\n\n    const [center, setCenter] = useState<google.maps.LatLngLiteral>({ lat, lng });\n\n    const onIdle = (m: google.maps.Map) => {\n        console.log('onIdle');\n        setZoom(m.getZoom()!);\n        setCenter(m.getCenter()!.toJSON());\n    }\n\n    const onBoundsChanged = () => {\n        searchBox.setBounds(map.getBounds as google.maps.LatLngBounds);\n    };\n\n    const onPlacesChanged = () => {\n        const places = searchBox.getPlaces();\n        if (places.length == 0) {\n            return;\n        }\n\n        markers.forEach((marker) => {\n            marker.setMap(null);\n        });\n\n        markers = [];\n\n        const bounds = new google.maps.LatLngBounds();\n\n        places.forEach((place) => {\n            if (!place.geometry || !place.geometry.location) {\n                console.log(\"Returned place contains no geometry\");\n                return;\n            }\n\n            const icon = {\n                url: place.icon as string,\n                size: new google.maps.Size(71, 71),\n                origin: new google.maps.Point(0, 0),\n                anchor: new google.maps.Point(17, 34),\n                scaledSize: new google.maps.Size(25, 25),\n            };\n\n            markers.push(\n                new google.maps.Marker({\n                    map,\n                    icon,\n                    title: place.name,\n                    position: place.geometry.location,\n                })\n            );\n\n            if (place.geometry.viewport) {\n                // Only geocodes have viewport\n                bounds.union(place.geometry.viewport);\n            } else {\n                bounds.extend(place.geometry.location);\n            }\n\n        });\n        map.fitBounds(bounds);\n    }\n\n    const searchBox = new google.maps.places.SearchBox(input);\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n    let markers: google.maps.Marker[] = [];\n\n    map.addListener(\"bounds-changed\", onBoundsChanged)\n    map.addListener(\"places-changed\", onPlacesChanged);\n\n    const handleAddLocationToItinerary = () => {\n        // update location db to have associated itinerary\n        console.log('added location to itinerary')\n\n        handleClose();\n    };\n\n    return (\n        <div className={showHideClassName}>\n            <section className=\"modal-main\">\n                <button type=\"button\" onClick={handleClose}>\n                    Close\n                </button>\n                <div>\n                    <input type='text'></input>\n                    <Wrapper apiKey={\"\"}>\n                        <Map\n                            center={center}\n                            onIdle={onIdle}\n                            zoom={zoom}\n                            style={{ flexGrow: \"1\", height: \"100%\" }}\n                        >\n                            <Marker position={center} />\n                        </Map>\n                    </Wrapper>\n\n                    <span>Add to itineraries: </span>\n                    <select>\n                        <option value=\"itinerary 1\">Itinerary 1</option>\n                    </select>\n                </div>\n                <button type=\"button\" onClick={handleAddLocationToItinerary}>\n                    Add location\n                </button>\n            </section>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}