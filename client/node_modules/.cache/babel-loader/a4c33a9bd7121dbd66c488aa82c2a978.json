{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Components/Itinerary/SingleItineraryPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useParams } from \"react-router\";\nimport { mockItineraries } from \"./ItinerariesPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SingleItineraryPage = () => {\n  _s();\n\n  const params = useParams();\n  const itinerary = mockItineraries.filter(itinerary => itinerary.id === parseInt(params.itineraryId))[0];\n  console.log(itinerary);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: itinerary.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(SingleItineraryPage, \"+jVsTcECDRo3yq2d7EQxlN9Ixog=\", false, function () {\n  return [useParams];\n});\n\n_c = SingleItineraryPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleItineraryPage\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Components/Itinerary/SingleItineraryPage.tsx"],"names":["useParams","mockItineraries","SingleItineraryPage","params","itinerary","filter","id","parseInt","itineraryId","console","log","name"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,cAA1B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;;AAMA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AACrC,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AAEA,QAAMI,SAAS,GAAGH,eAAe,CAACI,MAAhB,CAAuBD,SAAS,IAAIA,SAAS,CAACE,EAAV,KAAiBC,QAAQ,CAACJ,MAAM,CAACK,WAAR,CAA7D,EAAoF,CAApF,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;AAEA,sBACI;AAAA,2BACI;AAAA,gBAAMA,SAAS,CAACO;AAAhB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAMH,CAZM;;GAAMT,mB;UACMF,S;;;KADNE,mB","sourcesContent":["import { useParams } from \"react-router\";\nimport { LocationList } from \"../Location/LocationList\";\nimport { mockItineraries } from \"./ItinerariesPage\";\n\ninterface SingleItineraryPageProps {\n    itinerary: any;\n}\n\nexport const SingleItineraryPage = () => {\n    const params = useParams();\n\n    const itinerary = mockItineraries.filter(itinerary => itinerary.id === parseInt(params.itineraryId!))[0];\n    console.log(itinerary)\n\n    return (\n        <>\n            <div>{itinerary.name}</div>\n            {/* <LocationList locations={itinerary.locations}/> */}\n        </>\n    )\n};"]},"metadata":{},"sourceType":"module"}