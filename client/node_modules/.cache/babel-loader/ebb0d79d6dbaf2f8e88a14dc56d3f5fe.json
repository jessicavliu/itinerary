{"ast":null,"code":"var _jsxFileName = \"/Users/jessicaliu/Desktop/itinerary/src/Modal/SearchBox.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n_c = Wrapper;\nexport const SearchBox = _ref => {\n  _s();\n\n  let {\n    map\n  } = _ref;\n  const [searchBox, setSearchBox] = useState();\n  const ref = useRef(null);\n  let markers = [];\n  useEffect(() => {\n    if (ref.current) {\n      console.log('setting search box to ref.current');\n      setSearchBox(new google.maps.places.SearchBox(ref.current));\n    }\n  }, [ref]);\n\n  const onBoundsChanged = () => {\n    searchBox.setBounds(map.getBounds());\n  };\n\n  const onPlacesChanged = () => {\n    console.log('searchBox?', searchBox);\n    const places = searchBox.getPlaces();\n\n    if (places.length === 0) {\n      return;\n    }\n\n    markers.forEach(marker => {\n      marker.setMap(null);\n    });\n    markers = [];\n    const bounds = new google.maps.LatLngBounds();\n    places.forEach(place => {\n      if (!place.geometry || !place.geometry.location) {\n        console.log(\"Returned place contains no geometry\");\n        return;\n      }\n\n      const icon = {\n        url: place.icon,\n        size: new google.maps.Size(71, 71),\n        origin: new google.maps.Point(0, 0),\n        anchor: new google.maps.Point(17, 34),\n        scaledSize: new google.maps.Size(25, 25)\n      };\n      markers.push(new google.maps.Marker({\n        map,\n        icon,\n        title: place.name,\n        position: place.geometry.location\n      }));\n\n      if (place.geometry.viewport) {\n        // Only geocodes have viewport\n        bounds.union(place.geometry.viewport);\n      } else {\n        bounds.extend(place.geometry.location);\n      }\n    });\n    map.fitBounds(bounds);\n  };\n\n  map.addListener(\"bounds-changed\", onBoundsChanged);\n  map.addListener(\"places-changed\", onPlacesChanged);\n  console.log('rerender search box');\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: ref,\n      type: \"text\",\n      placeholder: \"Enter a location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBox, \"n8zwKKsB914dxW2BTsYwmAqu+gs=\");\n\n_c2 = SearchBox;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"SearchBox\");","map":{"version":3,"sources":["/Users/jessicaliu/Desktop/itinerary/src/Modal/SearchBox.tsx"],"names":["React","useEffect","useRef","useState","styled","Wrapper","div","SearchBox","map","searchBox","setSearchBox","ref","markers","current","console","log","google","maps","places","onBoundsChanged","setBounds","getBounds","onPlacesChanged","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","location","icon","url","size","Size","origin","Point","anchor","scaledSize","push","Marker","title","name","position","viewport","union","extend","fitBounds","addListener"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n\ninterface SearchBoxProps {\n    map: google.maps.Map;\n    mapApi?: any\n}\n\nexport const SearchBox: FC<SearchBoxProps> = ({ map }: SearchBoxProps) => {\n    const [searchBox, setSearchBox] = useState<google.maps.places.SearchBox>();\n    const ref = useRef<HTMLInputElement>(null);\n    let markers: google.maps.Marker[] = [];\n\n    useEffect(() => {\n        if (ref.current) {\n            console.log('setting search box to ref.current');\n            setSearchBox(new google.maps.places.SearchBox(ref.current));\n        }\n    }, [ref]);\n\n    const onBoundsChanged = () => {\n        searchBox!.setBounds(map.getBounds() as google.maps.LatLngBounds);\n    };\n\n    const onPlacesChanged = () => {\n        console.log('searchBox?', searchBox);\n        const places = searchBox!.getPlaces();\n        if (places.length === 0) {\n            return;\n        }\n\n        markers.forEach((marker) => {\n            marker.setMap(null);\n        });\n\n        markers = [];\n\n        const bounds = new google.maps.LatLngBounds();\n\n        places.forEach((place) => {\n            if (!place.geometry || !place.geometry.location) {\n                console.log(\"Returned place contains no geometry\");\n                return;\n            }\n\n            const icon = {\n                url: place.icon as string,\n                size: new google.maps.Size(71, 71),\n                origin: new google.maps.Point(0, 0),\n                anchor: new google.maps.Point(17, 34),\n                scaledSize: new google.maps.Size(25, 25),\n            };\n\n            markers.push(\n                new google.maps.Marker({\n                    map,\n                    icon,\n                    title: place.name,\n                    position: place.geometry.location,\n                })\n            );\n\n            if (place.geometry.viewport) {\n                // Only geocodes have viewport\n                bounds.union(place.geometry.viewport);\n            } else {\n                bounds.extend(place.geometry.location);\n            }\n\n        });\n        map.fitBounds(bounds);\n    }\n\n    map.addListener(\"bounds-changed\", onBoundsChanged)\n    map.addListener(\"places-changed\", onPlacesChanged);\n\n    console.log('rerender search box');\n\n    return (\n        <Wrapper>\n            <input\n                ref={ref}\n                type=\"text\"\n                placeholder=\"Enter a location\"\n            />\n        </Wrapper>\n    );\n};"]},"metadata":{},"sourceType":"module"}